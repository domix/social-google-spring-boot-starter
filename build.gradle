import java.text.SimpleDateFormat

buildscript {
  ext {
    springBootVersion = '1.3.0.M5'
  }
  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/plugins-release" }
  }
  dependencies {
    classpath 'io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
  }
}

plugins {
  id 'net.researchgate.release' version '2.2.2'
  id "com.github.hierynomus.license" version "0.11.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'propdeps'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement {
  imports {
    mavenBom 'io.spring.platform:platform-bom:1.1.3.RELEASE'
    mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"

  }
}

repositories {
  jcenter()
}

dependencies {
  compile 'org.springframework.boot:spring-boot-autoconfigure'
  compile 'org.springframework.social:spring-social-web'
  compile 'org.springframework.social:spring-social-google:1.0.0.RELEASE'

  optional 'org.projectlombok:lombok'
}

group = 'com.domingosuarez.boot'

Date buildTimeAndDate = new Date()
ext {
  buildDate = new SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
  buildTime = new SimpleDateFormat('hh:mm aa').format(buildTimeAndDate)
}

def jarManifestAttributes = [
  'Built-By'  : System.properties['user.name'],
  'Created-By': System.properties['java.version'] + ' (' + System.properties['java.vendor'] + ' ' + System.getProperty("java.vm.version") + ")",
  'Build-Date': buildDate,
  'Build-Time': buildTime]

jar {
  baseName = 'spring-social-google'
  manifest {
    attributes(jarManifestAttributes)
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

license {
  header rootProject.file('config/HEADER_LICENSE')
  strictCheck true
}

def githubRepoName ='social-google-spring-boot-starter'

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      def lombok = it.pom.getRuntimeDependencies().find {
        it.artifactId == 'lombok'
      }

      if (lombok) {
        it.pom.getRuntimeDependencies().remove(lombok)
      }

      artifact sourcesJar

      pom.withXml {
        def root = asNode()

        def parentNode = asNode().appendNode('parent')
        parentNode.appendNode('groupId','org.springframework.boot')
        parentNode.appendNode('artifactId','spring-boot-starter-parent')
        parentNode.appendNode('version',springBootVersion)

        root.appendNode('name', project.name)
        root.appendNode('description', project.description)
        root.appendNode('url', "https://github.com/domix/${githubRepoName}")
        root.appendNode('inceptionYear', '2015')

        def scm = root.appendNode('scm')
        scm.appendNode('url', "https://github.com/domix/${githubRepoName}")
        scm.appendNode('connection', "scm:https://domix@github.com/domix/${githubRepoName}.git")
        scm.appendNode('developerConnection', "scm:git@github.com:domix/${githubRepoName}.git")

        def license = root.appendNode('licenses').appendNode('license')
        license.appendNode('name', 'The Apache Software License, Version 2.0')
        license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
        license.appendNode('distribution', 'repo')

        def developers = root.appendNode('developers')
        def domix = developers.appendNode('developer')
        domix.appendNode('id', 'domix')
        domix.appendNode('name', 'Domingo Suarez Torres')
        domix.appendNode('email', 'domingo.suarez@gmail.com')

        root.dependencies.'*'.findAll() {
          it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
            dep.name == it.artifactId.text()
          }
        }.each() {
          it.scope*.value = 'compile'
        }
      }


    }
  }
}

bintray {
  user = project.hasProperty('bintrayUsername') ? bintrayUsername : ''
  key = project.hasProperty('bintrayApiKey') ? bintrayApiKey : ''

  publications = ['mavenJava']
  dryRun = false //Whether to run this as dry-run, without deploying
  publish = true //If version should be auto published after an upload
  pkg {
    repo = 'spring-boot'
    userOrg = 'domix'
    name = project.name
    desc = project.description
    websiteUrl = "https://github.com/domix/${githubRepoName}"
    issueTrackerUrl = "https://github.com/domix/${githubRepoName}/issues"
    vcsUrl = "https://github.com/domix/${githubRepoName}.git"
    licenses = ['Apache-2.0']
    labels = ['spring', 'spring-boot', 'spring-social', 'google', 'oauth2', 'spring-social-google', 'spring-boot-starter']
    publicDownloadNumbers = true
    attributes = [:]
    //Optional version descriptor
    version {
      name = project.version
      desc = project.description
      gpg {
        sign = project.hasProperty('bintrayGpgPassphrase')
        passphrase = project.hasProperty('bintrayGpgPassphrase') ? bintrayGpgPassphrase : ''
      }
      mavenCentralSync {
        sync = false
        user = ''
        password = ''
        close = '1'
      }
    }
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
}

createReleaseTag.dependsOn bintrayUpload

classes.dependsOn licenseFormat
